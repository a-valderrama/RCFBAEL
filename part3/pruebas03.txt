#|
Pruebas....

;remove-logical-operators
> (remove-logical-operators (parser-NLO '(not (or #t #f))))
(language:L4 '(if (if #t #t #f) #f #t))

> (remove-logical-operators (parser-NLO '(not (or (and #t #f) #f))))
(language:L4 '(if (if (if #t #f #f) #t #f) #f #t))

;eta-reduccion
> (eta-expand (parser-L4 '((+) 2 3)))
(language:L5 '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) 2 3))

> (eta-expand (parser-L4 '((length) list)))
(language:L5 '((lambda ((x0 List)) (primapp length x0)) list))

------------------------------

;quote
> (quote-const (parser-L5 '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) 2 3)))
(language:L6 '((lambda ((x0 Int) (x1 Int)) (primapp + (cuote x0) (cuote x1))) (cuote 2) (cuote 3)))

> (quote-const (parser-L5 '((lambda ((x0 List)) (primapp length x0)) list)))
(language:L6 '((lambda ((x0 List)) (primapp length (cuote x0))) (cuote list)))

-------------------------------

;Corridito para direct-app...
> (parser-L4 '(( lambda ([ x Int ] [ y Int ]) '((+) x y ) ) 5 '((+) 3 4)))
(language:L4 '((lambda ((x Int) (y Int)) '((+) x y)) 5 '((+) 3 4)))

> (eta-expand (parser-L4 '(( lambda ([ x Int ] [ y Int ]) '((+) x y ) ) 5 '((+) 3 4))))
(language:L5 '((lambda ((x Int) (y Int)) '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) x y)) 5 '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) 3 4)))

> (quote-const (parser-L5 '((lambda ((x Int) (y Int)) '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) x y)) 5 '((lambda ((x0 Int) (x1 Int)) (primapp + x0 x1)) 3 4))))
(language:L6
 '((lambda ((x Int) (y Int)) ((cuote quote) ((lambda ((x0 Int) (x1 Int)) (primapp + (cuote x0) (cuote x1))) (cuote x) (cuote y))))
   (cuote 5)
   ((cuote quote) ((lambda ((x0 Int) (x1 Int)) (primapp + (cuote x0) (cuote x1))) (cuote 3) (cuote 4)))))

> (direct-app (parser-L6 '((lambda ((x Int) (y Int)) ((cuote quote) ((lambda ((x0 Int) (x1 Int)) (primapp + (cuote x0) (cuote x1))) (cuote x) (cuote y))))
   (cuote 5)
   ((cuote quote) ((lambda ((x0 Int) (x1 Int)) (primapp + (cuote x0) (cuote x1))) (cuote 3) (cuote 4))))))
(language:L6
 '(let ((x Int (cuote 5)) (y Int ((cuote quote) (let ((x0 Int (cuote 3)) (x1 Int (cuote 4))) (primapp + (cuote x0) (cuote x1))))))
    ((cuote quote) (let ((x0 Int (cuote x)) (x1 Int (cuote y))) (primapp + (cuote x0) (cuote x1))))))

|#